name: Build and Release

on:
  push:
    branches: [master]
    tags:
      - "v*" # Trigger on version tags like v1.0.0
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Qt system packages (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xinerama0 libglib2.0-0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --hide-console hide-late -F main.py

      - name: Package binary and extra files
        run: |
          mkdir -p release
          cp dist/* release/
          mkdir -p release/configs
          cp configs/config.ini release/configs/config.ini
          # Put version into config
          echo -n "version = " >> configs/current_version.ini
          echo "${{ github.ref_name }}" | cut -f2 -d'v' >> configs/current_version.ini
          cp configs/current_version.ini release/configs/current_version.ini
          mkdir -p release/logo
          cp logo/AniBaza_Logo16x9.ass release/logo/AniBaza_Logo16x9.ass
          mkdir -p release/fonts
          cp fonts/AniBaza-Regular.otf release/fonts/AniBaza-Regular.otf

      - name: Archive for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cp ffmpeginstall.bat release/ffmpeginstall.bat
          Compress-Archive -Path release\* -DestinationPath windows.zip

      - name: Archive for macOS
        if: matrix.os == 'macos-latest'
        run: |
          zip -r macos.zip release

      - name: Archive for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czf linux.tar.gz -C release .

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-archive
          path: |
            *.zip
            *.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Changelog
        uses: Bullrich/generate-release-changelog@2.0.2
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Download all archive artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          append_body: true
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          files: artifacts/**/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
